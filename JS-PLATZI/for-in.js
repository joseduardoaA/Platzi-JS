/*
Loop: for in
Un objeto es un tipo de dato complejo (ver las primeras clases), se usa para guardar informaci√≥n en pares propiedad:valor. En su estructura un objeto se declara como una variable con su nombre y se le asigna entre llaves {} todos los pares: propiedad: valor separados por comas:


const nombreDelObjeto = {
    propiedad1: valor1,
    propiedad2: valor2,
    ...,
    propiedadN: valorN
}
La diferencia es c√≥mo se guarda la informaci√≥n: los array y string tienen items (elementos), y los objetos usan propiedad-valor.

for in se usa en objetos enumerables, para iterar en las propiedades y valores.
****La estructura es:


for (variable in objeto) {
	c√≥digo a ejecutar
}
En este caso el objeto es una 'listaDeCompras' y guarda la informaci√≥n como fruta: unidades a comprar:


const listaDeCompras = {
    manzana: 5, 
    pera: 3, 
    naranja: 2, 
    uva: 1
}
Si quisiera iterar por estas propiedades el for in ser√≠a as√≠:


for (fruta in listaDeCompras) {
    console.log(fruta)
}
manzana
pera
naranja
uva
Y ¬øQu√© pasa si quiero imprimir el valor que tiene cada una de las propiedades?

Entonces, podemos usar Template Literal, el for in ser√≠a as√≠:


for (fruta in listaDeCompras) {
    console.log(`${fruta}: ${listaDeCompras[fruta]}`)
} 
manzana: 5
pera: 3
naranja: 2
uva: 1
¬øPor qu√© sucede esto?
Porque cuando plateamos el for in, la variable fruta se convierte en un n√∫mero de √≠ndice, entonces es como recorrer un array, donde fruta va a ser el √≠ndice de cada propiedad del objeto. Lo que indicamos al escribir ${listaDeCompras[frutas]} es que traiga el valor del √≠ndice de la propiedad que est√° recorriendo.

¬øQue pasar√≠a si en vez de un for in usamos un for of?
En este caso nos dar√≠a error: Uncaught TypeError: listaDeCompras is not iterable

Conclusi√≥n üíö
Cuando es array o string usamos for of. Cuando es objeto usamos for in.
*/

const listaDeCompras = {
    manzana: 5,
    sandia: 1,
    pera: 6,
    naranja: 2
}

for (fruta in listaDeCompras){
    console.log(fruta)
}

for (fruta in listaDeCompras){
    console.log(` Comprare: ${listaDeCompras[fruta]} ${fruta} `)
}